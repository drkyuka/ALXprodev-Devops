#!/bin/bash
base_dir="./pokemon_data"
if [[ ! -d $base_dir ]]; then
    mkdir -p $base_dir
else
    echo "Directory $base_dir already exists. Proceeding with data fetching..."
    echo "Clearing existing files in $base_dir..."
    rm -vf $base_dir/*.json

    if [[ $? -eq 0 ]]; then
        echo "Existing files cleared."
    else
        echo "Failed to clear existing files in $base_dir. Exiting script." >> ./errors.txt
        exit 1
    fi
fi

# Define the fetch_data_with_deadline function
fetch_data_with_deadline() {
    local pokemon_name="$1"
    max_timer=10

    (
        # Fetch data using curl
        echo "Fetching data for $pokemon_name..."
        curl -sf "https://pokeapi.co/api/v2/pokemon/${pokemon_name}" -o "${base_dir}/${pokemon_name}.json" &
        process_id=$!

        # Wait for 5 seconds and then send a HUP signal to the curl process
        echo "*** deadline of $max_timer seconds for fetching data for $pokemon_name..."
        (sleep $max_timer && kill -HUP $process_id 2>/dev/null) &
        timer_pid=$!

        # Ensure the timer process is killed when the script exits
        echo "-- Trap to kill timer $pokemon_name::$process_id-> $timer_pid on exit..."
        trap "kill $timer_pid 2>/dev/null" EXIT

        # Wait for the curl process to finish
        wait $process_id
        result=$?

        # Kill the timer process if it is still running
        if [[ $result -eq 0 ]]; then
            echo "Data for $pokemon_name fetched successfully."
        else
            echo "Failed to fetch data for $pokemon_name. Error code: $result" >> ./errors.txt
        fi
    )
}

for pokemon in bulbasaur ivysaur venusaur charmander charmeleon; do
    fetch_data_with_deadline "$pokemon" &
done

jobs
wait

echo "All data fetching operations completed."
